
/* Copyright 2008-2019 Douglas Wikstrom
 *
 * This file is part of Verificatum Core Routines (VCR).
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.verificatum.ui.info;

import javax.xml.XMLConstants;

/**
 * Represents the private info of a party in a protocol. It stores the
 * name of the party, its own directory, its temporary directory, and
 * some source of randomness. Additional fields, e.g., secret keys,
 * can be added.
 *
 * @author Douglas Wikstrom
 */
public final class PrivateInfo extends RootInfo {

    /**
     * Name of private tag.
     */
    public static final String PRIVATE = "private";

    /**
     * Creates an instance with the given additional info fields.
     *
     * @param infoFields Additional info fields.
     */
    public PrivateInfo(final InfoField... infoFields) {
        addInfoFields(infoFields);
    }

    // These methods are documented in the super class.

    @Override
    public PrivateInfo parse(final String infoFilename)
        throws InfoException {
        return (PrivateInfo) super.parse(infoFilename);
    }

    @Override
    public Info endElement(final String content, final String tagName)
        throws InfoException {
        if (tagName.equals(PRIVATE)) {
            return null;
        } else {
            return super.endElement(content, tagName);
        }
    }

    @Override
    public String generateSchema() {
        final StringBuffer sb = new StringBuffer();

        // Generate the beginning of the schema
        String s = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
            + "<xs:schema xmlns:xs=\""
            + XMLConstants.W3C_XML_SCHEMA_NS_URI
            + "\">";
        sb.append(s).append('\n');

        // Include custom XSD types.
        sb.append('\n').append(XSTypes.IP).append("\n\n");

        // Generate protocol element
        s = "<xs:element name=\"" + PRIVATE + "\">\n" + "<xs:complexType>\n"
            + "<xs:sequence>";
        sb.append(s).append("\n\n");

        // Generate all our fields
        schemaOfInfoFields(sb);

        // Generate the end of the schema
        s = "</xs:sequence>\n" + "</xs:complexType>\n" + "</xs:element>\n\n"
            + "</xs:schema>\n";
        sb.append(s);

        return sb.toString();
    }

    @Override
    public String toXML() {
        final StringBuffer sb = new StringBuffer();

        final String genDescription =
            "ATTENTION! This is a private information file. It contains all "
            + "your internal parameters of a protocol execution, including "
            + "your secret signing key."
            + "\n\n"
            + "WARNING! The contents of this file MUST REMAIN SECRET. "
            + "Failure to do so may result in a catastrophic security breach."
            + "\n\n"
            + "DO NOT edit this file during the execution of the protocol. "
            + "If you must edit it, then please be VERY CAREFUL and MAKE "
            + "SURE THAT YOU UNDERSTAND THE IMPLICATIONS OF YOUR EDITS."
            + "\n\n"
            + "Many XML features are disabled and throw errors, so parsing "
            + "is more restrictive than the schema implies.";

        sb.append('\n');
        formatComment(sb, 0, genDescription, 2);

        formatTag(sb, 0, PRIVATE, BEGIN, 1);
        xmlOfInfoFields(sb, 1);
        sb.append('\n');
        formatTag(sb, 0, PRIVATE, END, 2);
        return sb.toString();
    }
}
